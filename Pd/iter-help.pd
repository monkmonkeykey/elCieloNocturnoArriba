#N canvas 499 98 558 445 10;
#X obj 4 296 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 352 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 392 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 90 307 cnv 17 3 38 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 90 365 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 147 400 (none);
#X obj 212 253 print;
#X obj 212 226 cyclone/iter;
#X obj 3 421 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X text 159 308 bang;
#X text 111 365 float/symbol;
#X text 135 327 anything;
#X text 196 308 - outputs the last received input as sequential elements;
#X text 196 327 - split elements sequentially;
#X msg 181 145 1 2 three;
#X msg 212 171 list one two 3;
#X msg 232 198 any message type;
#X text 196 365 - according to the input element \, in sequential order;
#X obj 66 256 print;
#X obj 38 180 bng 17 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 66 150 loadbang;
#X msg 66 180 1 2 3;
#X obj 66 224 cyclone/iter;
#X text 70 92 [iter] is similar to [unnpack] \, it splist a message (to floats/symbols) but outputs them sequentially in the given order.;
#X msg 389 163 60 63 67;
#X obj 389 191 cyclone/iter;
#X obj 389 225 makenote 64 500;
#X obj 429 257 noteout;
#X text 380 141 a chord from list;
#X obj 4 4 ./header iter;
#X text 18 62 Split messages sequentially;
#X connect 7 0 6 0;
#X connect 14 0 7 0;
#X connect 15 0 7 0;
#X connect 16 0 7 0;
#X connect 19 0 22 0;
#X connect 20 0 21 0;
#X connect 21 0 22 0;
#X connect 22 0 18 0;
#X connect 24 0 25 0;
#X connect 25 0 26 0;
#X connect 26 0 27 0;
#X connect 26 1 27 1;
