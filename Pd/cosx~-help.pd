#N canvas 394 23 562 594 10;
#X obj 4 568 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 3 385 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 423 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 460 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 494 cnv 3 550 3 empty empty more_info 8 12 0 13 #dcdcdc #000000 0;
#X obj 82 434 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 115 398 signal;
#X text 115 434 signal;
#X text 115 471 (none);
#X obj 195 173 *~ 6.28319;
#X obj 82 398 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 195 201 cyclone/cosx~;
#X text 171 434 - output of cosine function;
#X obj 195 141 phasor~ 2;
#X text 171 353 -1;
#X text 175 291 0;
#X text 177 228 1;
#X text 267 174 * 2pi;
#X text 171 398 - input to cosine function (in radians);
#X text 129 503 Like [cyclone/sinx~] & [cyclone/tanx~] \, it expects input values in radians. Thus \, unlike [cos~] (from vanilla and max/msp) \, it's not designed to work with [phasor~]'s output (from 0 to 1).;
#X text 62 93 Properly designed for mathematical operations \, [cosx~] it expects an input in radians to calculate the cosine of each input sample.;
#X obj 497 71 cyclone/dsponoff~;
#X obj 195 232 cyclone/scope~ 130 130 256 3 128 -1 1 0 0 0 0 205 229 232 74 79 77 96 98 102 0 empty;
#X obj 4 4 ./header cosx~;
#X text 22 61 Signal cosine function (radian input);
#X obj 399 252 sig~;
#X obj 399 311 cyclone/snapshot~ 1;
#X obj 399 341 nbx 9 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 399 228 nbx 9 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 399 282 cyclone/cosx~;
#X connect 9 0 11 0;
#X connect 11 0 22 0;
#X connect 13 0 9 0;
#X connect 25 0 29 0;
#X connect 26 0 27 0;
#X connect 28 0 25 0;
#X connect 29 0 26 0;
